<%- class_name = decolonize(model.name) -%>
<%- all_caps_name = class_name.upcase -%>
<%- storage_name = table_name(model) -%>

#ifndef T_<%= all_caps_name %>
#define T_<%= all_caps_name %>
#include "O_<%= class_name %>.hpp"

namespace DMMM {

class T_<%= class_name %>{
public:

    struct Condition{
        bool nil() const { return _cond.size() == 0; }
        std::string _cond;
    };

    T_<%= class_name %>() 
    {
        _tables.push_back("<%= storage_name %>");
    }
    T_<%= class_name %>(const Condition& c) 
        : _constraint(c)
    {
        _tables.push_back("<%= storage_name %>");
    }

    <%- sigset = Set.new -%>
    <%- many_to_one.each do |r| -%> 
    <%- parent = decolonize(parent_name(r)) -%>
    <%- signature = "T_#{class_name}(const I_#{parent}" -%>
    <%- sigset.member?(signature) ? next : sigset.add(signature) -%>
    <%= signature %>& parentId)
    {
        _tables.push_back("<%= storage_name %>");
        
        _constraint._cond = "(<%= storage_name.to_s + "." + get_key_to_parent(r).to_s %> = " + parentId.to_s() + ")";
    } 
    <%- end -%>
    
    <%- generated_properties.each do |property| -%>
    struct E_<%= property.name %>{
        E_<%= property.name %>() 
        {  
            _field = "<%= storage_name %>.<%= property.name.to_s %>";
        }
        std::string _field;
        typedef T_<%= class_name %>::Condition ConditionType;
        typedef <%= property.cpp_name %>::Base ComparerType;
    };

    static E_<%= property.name %> _<%= property.name %>(){ 
        return E_<%= property.name %>();
    }
    <%- end -%>    

    std::vector<std::string> getFields()
    {
        std::vector<std::string> ret;
        ret.clear();
        <%- generated_properties.each do |property| -%>
        ret.push_back("<%= property.name %>");
        <%- end -%>
        return ret;
    }

    std::vector<O_<%= class_name %>> 
    select(const Condition& c, const std::string& additional)
    {
        std::vector<O_<%= class_name %>> ret;
        Condition c1 = _constraint.nil() ? c : _constraint && c;
        std::vector<std::string> fields = getFields();
        QueryRes res;
        DBFace::instance()->select(_tables, fields, c1._cond, 
                                   additional, res);
        ret.resize(res.size());
        for(size_t i = 0; i < res.size(); ++i){
            <%- generated_properties.each do |property| -%>
            ret[i]._f_<%= property.name %>._base =
            <%- if is_enum?(property) -%>
                (<%= property.cpp_name %>::Base)UTILS::fromString<size_t>(res[i]["<%= property.name %>"]);
            <%- else -%>
                UTILS::fromString<<%= property.cpp_name %>::Base>(res[i]["<%= property.name %>"]);
            <%- end -%>
            <%- end -%>
        }
        return ret;
    }

    size_t count(const Condition& c)
    {
        Condition c1 = _constraint.nil() ? c : _constraint && c;
        return DBFace::instance()->count(_tables, c1._cond);
    }

    void erase(const Condition& c)
    {
        Condition c1 = _constraint.nil() ? c : _constraint && c;
        DBFace::instance()->erase(_tables, c1._cond);
    }

    void erase()
    {   
        DBFace::instance()->erase(_tables, _constraint._cond);
    }


    std::vector<O_<%= class_name %>> select(const Condition& c)
    {
        Condition c1 = _constraint.nil() ? c : _constraint && c;
        return select(c1, "");
    }

    std::vector<O_<%= class_name %>> 
    select(const std::string& additional)
    {
        return select(_constraint, additional);
    }

    std::vector<O_<%= class_name %>> select()
    {
        return select(_constraint, "");
    }

    std::pair<O_<%= class_name %>, bool> select(const I_<%= class_name %>& id){
        return first(E_<%= primary_key(model) %>() == id);
    }

    std::pair<O_<%= class_name %>, bool> first(const Condition& c)
    {
        Condition c1 = _constraint.nil() ? c : _constraint && c;
        std::vector<O_<%= class_name %>> r = select(c, "limit 1");
        if(r.size() > 0)
            return std::make_pair(r[0], true);
        else
            return std::make_pair(O_<%= class_name %>(), false);
    }

    std::pair<O_<%= class_name %>, bool> first(){
        return first(_constraint);
    }

    bool insertAllFields(std::vector<O_<%= class_name %>>::const_iterator begin,
                         std::vector<O_<%= class_name %>>::const_iterator end)
    {
	std::vector<std::string> fields;
        <%- generated_properties.each do |property| -%>
        <% if property.name != primary_key(model) %>

        fields.push_back(std::string("<%= property.name %>"));
        <%- end -%>
        <%- end -%>
	std::vector<std::vector<std::string> > rows;
	for (; begin != end; ++begin){
	    const O_<%= class_name %>& r = *begin;
	    std::vector<std::string> row;
	    <%- generated_properties.each do |property| -%>
            <% if property.name != primary_key(model) %>
            row.push_back(toSQLString(r._<%= property.name %>()));
            <%- end -%>
            <%- end -%>
	    rows.push_back(row);
	}
        return DBFace::instance()->insert("<%= storage_name %>",
					  fields, rows);
    }

    bool insertDirtyFields(std::vector<O_<%= class_name %>>::const_iterator begin,
                           std::vector<O_<%= class_name %>>::const_iterator end)
    {
        if (begin == end)
            return true;
        FieldsToRows fields2Rows;
	for (std::vector<O_<%= class_name %>>::const_iterator it = begin; 
             it != end; ++it)
        {
            std::vector<std::string> fields;
            std::vector<std::string> row;
	    <%- generated_properties.each do |property| -%>
            <% if property.name != primary_key(model) %>

            if (it->_f_<%= property.name %>._dirty){
                fields.push_back(std::string("<%= property.name %>"));
                row.push_back(toSQLString(it->_<%= property.name %>()));
            }
            <%- end -%>
            <%- end -%>
            fields2Rows[fields].push_back(row);
	}
        bool ret = true;
        for (FieldsToRows::const_iterator it = fields2Rows.begin();
             it != fields2Rows.end(); ++it)
        {
            ret = DBFace::instance()->insert("<%= storage_name %>",
                                             it->first, it->second) && ret;
        }
        return ret;
    }


    Condition                 _constraint;    
    std::vector<std::string>  _tables;
};

} //namespace DMMM
#endif //T_<%= all_caps_name %>
