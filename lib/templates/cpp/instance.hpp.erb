<%- class_name = decolonize(model.name) -%>
<%- all_caps_name = class_name.upcase -%>
#ifndef O_<%= all_caps_name %>
#define O_<%= all_caps_name %>

#include <map>
#include <string>
#include "dmmm_utils.hpp"
#include "dmmm_dbface.h"
#include "dmmm_identifiers.hpp"
#include "dmmm_fields.hpp"
#include "dmmm_comparators.hpp"
<%- one_to_many.each do |relative| -%>
#include "T_<%= decolonize(child_model_name(relative)) %>.hpp"
<%- end -%>

<%- model.enums.each do |name, e| -%>
enum Enum<%= class_name %><%= name %> { <%= get_enum(name, e, class_name) %> };
<%- end -%>


namespace DMMM {

class O_<%= class_name %>{
public:

    O_<%= class_name %>() {}
    <%- sigset = Set.new -%>
    <%- many_to_one.each do |r| -%>
    <%- parent = decolonize(parent_name(r)) -%>
    <%- signature = "O_#{class_name}(const I_#{parent}" -%>
    <%- sigset.member?(signature) ? next : sigset.add(signature) -%>
    <%= signature %>& parent_id)
        : _f_<%= get_key_to_parent(r) %>(parent_id)
        {}
    <%- end -%>

    <%- if primary_key(model) -%>O_<%= class_name %>(const I_<%= class_name %>& id) 
        : _f_<%= primary_key(model) %>(id)
        {}
    <%- end -%>

    <%- one_to_many.each do |relative| -%>

    std::vector<O_<%= decolonize(child_model_name(relative)) %>> _<%= decolonize(child_plural_name(relative)) %>() const
    {
        T_<%= decolonize(child_model_name(relative)) %> table;
        return table.select(table._<%= child_key(relative.class_name.constantize) %>() == _id());   
    }
    std::vector<O_<%= decolonize(child_model_name(relative)) %>> 
        _<%= decolonize(child_plural_name(relative)) %>(const T_<%= decolonize(child_model_name(relative)) %>::Condition& c) const
    {
        T_<%= decolonize(child_model_name(relative)) %> table(c);
        return table.select(table._<%= child_key(relative.class_name.constantize) %>() == _id());   
    }
    <%- end -%>

    <%- generated_properties.each do |property| -%>
    const <%= property.cpp_name %>::Base& _<%= property.name %>() const { 
        return _f_<%= property.name %>._base; 
    }
    <%= property.cpp_name %>::Base& _<%= property.name %>() { 
        _f_<%= property.name %>._dirty = true; 
        return _f_<%= property.name %>._base; 
    }
    <%- end -%>

    <%- if primary_key(model) -%>
    bool update(){
        std::map<std::string, std::string> field2Val;
        <%- generated_properties.each do |property| -%>
          <%- if property.name == "updated_at" -%>

        field2Val["<%= property.name %>"] = "NOW()";

          <%-else-%>
        if (_f_<%= property.name %>._dirty)
            field2Val["<%= property.name %>"] = 
                toSQLString(_f_<%= property.name %>._base);
          <%- end -%>
        <%- end -%>
        std::string where =
            "<%= primary_key(model) %>=" + toSQLString(_f_<%= primary_key(model) %>._base);
        if (DBFace::instance()->update("<%= table_name(model) %>", 
                                       field2Val, where))
        {
            <%- generated_properties.each do |property| -%>
            _f_<%= property.name %>._dirty = false;
            <%- end -%>
            return true;
        }
        else
            return false;
    }
    <%- end -%>

    bool insert(){
        std::map<std::string, std::string> field2Val;
        <%- generated_properties.each do |property| -%>
          <%- if property.name == "created_at" -%>

        field2Val["<%= property.name %>"] = "NOW()";

          <%- else -%>
        if (_f_<%= property.name %>._dirty)
            field2Val["<%= property.name %>"] = 
                toSQLString(_f_<%= property.name %>._base);
          <%- end -%>
        <%- end -%>

        <% if primary_key(model) %>
        if (DBFace::instance()->
                insert("<%= table_name(model) %>", field2Val,
                       _f_<%= primary_key(model) %>._base.serialization()))
        <%- else -%>
        size_t id;
        if (DBFace::instance()->
                insert("<%= table_name(model) %>", field2Val,
                    id))
        <%- end -%>
        {
            <%- generated_properties.each do |property| -%>
            _f_<%= property.name %>._dirty = false;
            <%- end -%>
            return true;
        }
        else
            return false;
                                   
    }
private:
    <%- generated_properties.each do |property| -%>
    <%= property.cpp_name %> _f_<%= property.name %>;
    <%- end -%>

    friend class T_<%= class_name %>;
};

} //namespace DMMM
#endif //O_<%= all_caps_name %>
